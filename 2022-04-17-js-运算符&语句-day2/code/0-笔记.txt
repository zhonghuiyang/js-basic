
1. 学习内容

    1) 运算符 - 重点
        1> 算术运算符
        2> 三元运算符
        3> 逻辑运算符
        4> 字符串连接符
        5> 比较运算符
        6> 赋值运算符

    2) 流程控制语句 - 重点
        1> 分支语句 - 有选择执行
        2> 循环语句 - 重复执行

--------------------------------------------------------------------------------

2. 运算符

    1) 比较运算符   

        1> 结果: true  false

        2> >   >=   <   <= : 比较大小  不比较类型

        3> 重点比较

            ==  (等于)  : 比较大小 不比较类型 

            === (全等于): 比较大小和类型 

            !=  (不等于) : 和==相反

            !== (不全等于) : 和 === 相反

    2) 三元运算符

        1> 语法:  a ? b : c;   
        2> 理解:  如果a为真, 结果为b 否则为c

    3) 逻辑运算符

        1> &&  与(并且)
            a && b  : 只有a与b同时为真, 结果: true 否则: false

        2> ||  或(或者)
            a || b  : 只要a或者b中有一个为真,  结果: true 否则: false

        3> !   非(取反)
            !a      : 如果a为真, 结果: false  否则: true
    
    4) 字符串连接符
        1> 语法: a + b;
        2> 理解: 两个值相加,如果其中有一个值为字符串, 此时+是连接符,而不是运算符. 结果为字符串

    5) 赋值运算符

        a = 12;  //等号右边的值 赋值 给等号左边的变量
        a += 10; ===> a = a + 10


--------------------------------------------------------------------------------

3. 流程控制语句介绍 - 了解

    1) 概念: 是一个指令(命令), 控制程序执行过程,控制程序执行顺序
    2) 执行过程分类

        1> 逐行执行 - 默认
        2> 分支执行 - 有选择执行
            单分支: 单选
            双分支: 二选一
            多分支: 多选一

        3> 循环执行 - 重复执行

--------------------------------------------------------------------------------

4. 分支语句 - 掌握

    1) 单分支
        1> 语法: 
            if( 条件A ){
                代码块B
            }

        2> 理解: 
            如果A为真, 就执行B ,否则不执行

        3> 中文理解: 
            如果你满了18岁, 就可以谈恋爱
            如果明天下雨, 就带伞
            
    2) 双分支

        1> 语法: 
            if(条件A){
                代码块B
            }else{
                代码块C
            }

        2> 理解: 
            如果A为真,就执行B, 否则执行C

        3> 中文理解: 
            如果你满了18岁, 可以谈恋爱, 否则滚蛋,小屁孩
            如果明天下雨,就带伞, 否则不带

    3) 多分支

        1> 第1种

            if(条件A){
                代码块a

            }else if(条件B){
                代码块b

            }else if(条件C){
                代码块c
            }else{
                代码块n
            }

            理解: 
                如果A为真,执行a,并结束,否则判断B
                如果B为真,执行b,并结束,否则判断C
                如果C为真,执行c,并结束
                以上条件都为假,执行n
                

            注意：
                1. 如果条件有重合，最苛刻的条件放在最前面
                2. 最后一个else可以省略

        2> 第2种 - 了解

            switch(变量num){
                case 值1:
                代码块a;
                break; 

                case 值2:
                代码块b;
                break; 

                case 值3:
                代码块c;
                break; 

                default:
                代码块n;
                break;
            }

            理解: 
                判断num值是否全等于(===)值1, 如果条件为真,执行a,并结束, 否则
                判断num值是否全等于(===)值2, 如果条件为真,执行b,并结束, 否则
                判断num值是否全等于(===)值3, 如果条件为真,执行c,并结束, 否则
                以上条件都为假,执行n


--------------------------------------------------------------------------------

5. 循环语句 - 掌握

    1) 为什么要使用循环

        1> 减少代码冗余
        2> 方便后期对代码进行维护

    2) 循环四要素
        案例: 楼下 === 每天喊一句 我喜欢你, 喊10天

        初始化循环变量:  定义变量保存喊的次数                let i = 0;
        更新循环变量  :  喊1次加1                           i++  ++i i=i+1 i+=1
        循环条件      :  循环条件为真,继续喊,超过就结束循环   i<10
        循环体        :  重复执行操作                       每天喊一句 我喜欢你


    3) 循环分类

        1> for循环         - 重点

            a. 语法: 
                for(初始化循环变量; 循环条件;更新循环变量){
                    循环体
                }


            b. 执行流程: 
                for(let i=0; i<10; i++){
                    console.log( '我喜欢他' )
                }

                第1步: 初始化循环变量           ===> let i=0;
                第2步: 判断循环条件是否为真      ===> i<10
                第3步: 执行循环体               ===> {console.log( '我喜欢他' )}
                第4步: 更新循环变量             ===> i++
                第5步: 回到第2步


            c. 注意: 
                c1. 循环变量初始值可以是任意值
                c2. 更新循环变量可增可减
                c3. 更新步长可以是任意值, 一定是一个赋值运算
                c4. 循环体中可以访问循环变量

            d. 循环遍历 

                遍历: 依次取出某个范围内的所有数据

                for(let i=最小值; i<=最大值; i++){
                    i: 范围内的每个值
                }
                

                for(let i=最大值; i>=最小值; i--){
                    i: 范围内的每个值
                }


        2> while循环       - 了解


        3> do...while循环  - 了解























