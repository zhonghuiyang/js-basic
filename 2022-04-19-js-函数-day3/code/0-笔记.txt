
1. html+css学习目标

    目标: 能够制作网页

2. js学习目标
    目标: 
        上课能听懂90%   
        上课案例要写熟( 积累知识点  积累案例  积累代码量 )

--------------------------------------------------------------------

2. while循环 - 了解

    初始化循环变量
    while(循环条件){
        循环体
        更新循环变量
    }
    
    

3. do...while循环 - 了解

    初始化循环变量
    do{
        循环体
        更新循环变量

    }while(循环条件);


    小结: 
        for - 推荐使用(前端推荐)

        while和dowhile - 了解(后台推荐)

--------------------------------------------------------------------

4. 死循环 - 了解

    1) 理解: 一直循环下去, 永不停止
    2) 产生条件: 循环条件条件永远为真
    3) 死循环影响: 循环中会产生大量的临时数据,严重时造成内存溢出
    4) 注意: 尽量不写死循环, 如果写了死循环:必须在循环中通过判断达到某个条件时,强制退出循环


5. 终止循环 - 掌握

    break: 终止当前循环, 结束后面所有循环       ==== 推荐使用
    continue: 终止当前循环, 继续后面所有循环


--------------------------------------------------------------------

6. 双重for循环 - 了解


    //行
    for(){

        //列
        for(){
            
        }

    }


--------------------------------------------------------------------

7. 函数介绍 - 了解

    1) 概念: 封装的一个功能(方法)
    2) 特点: 不会主动运行, 需要手动调用
    3) 作用: 
        1> 减少代码冗余
        2> 最大作用: 复用 === 重复使用

    4) 分类

        自定义函数: 自己定义的函数
        内置函数  : js内部已经定义好了, 无需定义直接使用  === 拿来主义
            parseInt()  parseFloat()  Number() Boolean()

--------------------------------------------------------------------

8. 2种定义函数方式

    1) 函数声明式

        function 函数名(){          //具名函数
            函数体 
        }



    2) 函数表达式

        let 变量名 = function (){   //匿名函数
            函数体 
        }   


    区别: 
        声明式函数: 可以在定义之前之后调用函数
        表达式函数: 只能在定义之后调用函数

    推荐: 
        两种都重要

    调用: 
        函数名()


--------------------------------------------------------------------

7. 函数参数 - 掌握

    1) 为什么要用参数?
        定义函数时: 往往需要未知数据的参与, 调用函数时: 才传入具体的数据

        未知数据: 形参  形式参数
        具体数据: 实参  实际参数


    2) 定义

        function 函数名(形参1, 形参2,...形参n){          //具名函数
            函数体 
        }



        let 变量名 = function (形参1, 形参2,...形参n){   //匿名函数
            函数体 
        } 


    3) 调用函数

        函数名(实参1, 实参2,...实参n )


    4) 参数默认值

        function foo( food='鱼' ){
            console.log( '猫吃' + food );
        }

        foo()       //没有传参, 以默认参数为准
        foo('骨头') //传入参数, 就以传入值为准

--------------------------------------------------------------------

8. 函数返回值

    1) 为什么要使用函数返回值?
        希望函数执行后的结果, 能够被其他程序调用或参与运算

                函数调用            程序调用
        小麦 --------------> 面粉 ------------> 包子 馒头 面条 油条 飞饼

    2) 如何实现

        function 函数名(形参1, 形参2,...形参n){          //具名函数
            函数体 

            return 结果
        }



        let 变量名 = function (形参1, 形参2,...形参n){   //匿名函数
            函数体 

            return 结果
        } 

    3) 注意: 

        1> 函数遇到return就结束,return后面的代码都不会执行
        2> 每个函数都有返回值
            函数中没有return, 默认用undefined占位
            函数中有return, 函数返回值: 就是return返回的结果
    