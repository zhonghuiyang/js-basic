
1. js阶级 - 了解

    1) 初级(7天)

    2) 进阶(4天)

    3) 高级(5天)


    小结: 
        1> 明确学习目标
        2> 按照老师要求学习
        3> 学习心态 

--------------------------------------------------------------------------

2. js介绍 - 了解

    1) 概念: js是基于对象和事件驱动,并且具有相对安全性,解释型的客户端脚本语言 === 学完再理解

    2) 分类: 

        ECMA Script: 核心语法

        BOM: 浏览器对象模型 - 操作浏览器

        DOM: 文档对象模型 - 操作网页文档

    3) 作用: 在网页中添加交互效果

--------------------------------------------------------------------------

3. js引入 - 掌握

    1) 标签内部式 - 淘汰了

        语法: <标签名 事件属性="js代码"> </标签名>
        案例: <div onclick="alert('标签内部式')">标签内部式</div>
        理解: onclick - 点击


    2) 内嵌式 - 掌握

        语法: 在网页中创建script标签,script标签中写js代码
        案例: <script>  alert('内嵌式')  </script>

                
    3) 外链式 - 掌握

        语法: 
            1.在外面创建js文件: fn.js
            2.在html页面中通过script标签src属性引入

        案例: <script src="js文件路径"> <script>


    小结:   
        1> 内嵌式和外链式通常写在结束body标签之前
        2> 内嵌式 ===> 教学中  写demo
        3> 外链式 ===> 项目中
        4> 外链式 
                <script src="./js/fn.js">
                    alert(123) //不能在标签内部写js代码,因为会被fn.js中代码覆盖掉
                </script>

--------------------------------------------------------------------------

4. js输出 - 掌握

    1) 网页输出 - 淘汰
        document.write('内容')

    2) 弹出框输出 - 淘汰
        alert('内容')

    3) 控制台输出 - 掌握
        console.log('内容')



    小结: 为什么要先学输出?

        js排错技能之一: 打印法  (打印数据,验证代码逻辑是否正确)


--------------------------------------------------------------------------

5. 变量 - 掌握

    1) 概念: 用于存储临时数据的容器
    2) 深入理解: 在内存中分配了很多小空间,并且命名.用于保存程序运行过程中产生的临时数据

    3) 定义变量 

        ES5: var    变量 = 值;   //淘汰
        ES6: let    变量 = 值;   //推荐
        ES6: const  变量 = 值;   //推荐

    4) 三种定义变量区别

        定义变量 = 声明变量 + 赋值

        定义: var name = "张益达"
        声明: var name;
        赋值: name = "张益达"

        var:    可以重新声明和赋值
        let:    不能重新声明 可以重新赋值
        const:  定义常量 不能重新声明和赋值

        小结: 
            let == 推荐使用 ( 目前使用 )
            const == 推荐使用 ( 后期用 )

    5) 定义多个变量

        一个let一次可以定义多个变量, 变量之间用逗号隔开
    
        let aa = 20,
            bb = 21,
            cc = 22;

    6) 标识符(变量名)命名规则

        1> 一般由: 数字 字母 下划线_ 美刀$组成
        2> 不能以数字开头
        3> 字母区分大小写
        4> 不能使用关键字和保留字
        5> 驼峰命名法
        6> 不能含有特殊符号

            小驼峰: zhangsanfeng  ===>  zhangSanFeng
            大驼峰: zhangsanfeng  ===>  ZhangSanFeng


        sb250   √
        250px   ×
        $1      √
        _$2     √
        box-news ×
        var      ×
        zhang_san √
        5         ×  
        *4        ×
        

--------------------------------------------------------------------------

6. 数据类型 - 掌握

    1) 为什么要分类?

        1> 节约内存空间
        2> 只有同种类型的数据才能运算

    2) 分类 

        1> 基本类型
            ES5：5种
                Number--(数字)
                String--(字符串)
                Boolean--(布尔型)
                Undefined--(未定义)
                Null--(空)

            ES6：新增1种
                Symbol()--(Symbol类型)

        2> 引用类型
            Object

    3) 基本类型 ( 6种 )

        1> number: 数字
            值: 整数  小数 特殊字符
            NaN: not a number   不是一个明确的值


        2> string: 字符串
            值: 加引号的数据就是字符串
            '12'  '中文'  '' 

        3> boolean: 布尔 
            值: true  false
            true: 真  正确
            false: 假 错误

        4> undefined: 未定义
            值: undefined
            undefined: 定义变量,没有赋值,默认值就是: undefined

        5> null : 空
            值: null   没有
            
        6> symbol : 符号 代表  
            运用场景有限,暂时不做了解
            
    4) 类型检测 

        理解: 判断一个数据,是什么类型?

        语法: typeof 数据/变量

    5) 类型转换

        1> 强制类型转换

            1> 转为number类型
                parseInt()   转为整数
                parseFloat() 转为数字, 保留小数
                Number()     转为数字    


            2> 转为boolean类型
                Boolean()

            3> 转为string类型
                String()


        2> 自动类型转换(了解) - 根据上下文环境转换


--------------------------------------------------------------------------

7. 运算符 - 掌握

    1) 算术运算符

        %: 取模  求余数  ===> 除不尽剩下的整数

        ++: 自增1

            前置: 
                ++变量  ==> ++a     ===> a = a + 1    
                先自增后运算

            后置: 
                变量++  ==> a++     ===> a = a + 1
                先运算后自增

        